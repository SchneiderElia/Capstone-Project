export interface ICountdownTimerParams {
    /**
     * Countdown time in milliseconds.
     */
    timer: number;
    /**
     * Default: 1000.
     * Interval between ticks in milliseconds.
     */
    interval?: number;
    /**
     * Default: false.
     * Determines if the countdown will start ticking on mount. This value has no effect on
     * a timer after it has expired or been reset.
     */
    autostart?: boolean;
    /**
     * Default: false
     * Determines if the countdown will expire immediately when ticking to 0. If false,
     * the timer will first set countdown to 0 and then expire on the next interval tick.
     */
    expireImmediate?: boolean;
    /**
     * Default: true.
     * Reset the countdown to it's initial value after expiration. If false,
     * the countdown will remain at 0 in a non-running state until reset.
     */
    resetOnExpire?: boolean;
    /**
     * Callback fired on countdown expiration.
     */
    onExpire?: () => void;
    /**
     * Callback fired when countdown is reset, either by setting resetOnExpire to true
     * or explicitly calling the reset method.
     */
    onReset?: () => void;
}
export declare type CountdownTimerResults = {
    /**
     * Current value of the countdown.
     */
    countdown: number;
    /**
     * Is the countdown currently ticking.
     */
    isRunning: boolean;
    /**
     * Start a non-running and non-expired timer. If countdown has expired and
     * resetOnExpire = false, reset must be called before starting again.
     */
    start: () => void;
    /**
     * Reset a countdown to it's initial state.
     */
    reset: () => void;
    /**
     * Pause a running countdown.
     */
    pause: () => void;
};
/**
 * Create a configurable countdown timer.
 */
export declare function useCountdownTimer({ timer, interval, autostart, expireImmediate, resetOnExpire, onExpire, onReset, }: ICountdownTimerParams): CountdownTimerResults;
//# sourceMappingURL=index.d.ts.map